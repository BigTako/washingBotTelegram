import string
from aiogram import types, Dispatcher
from loader import bot
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from database import database as db
import datetime as dt
from logger import log_func, logger
from keyboards.client_kb import clientMenu, machinesMenu, cancel_menu, dateMenu, submitMenu

__group_id = -1001608774061 # id –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç—Å—ã–ª–∫–∏ –∑–∞–ø–∏—Å–µ–π

def validate_data(date: str, char:str):
    """–§—É–Ω–∫–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –¥–∞—Ç—ã. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
       date--> –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏  char--> –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ("d"-->–¥–∞—Ç–∞ "t"-->–≤—Ä–µ–º—è)"""
    if char == "d": # –µ—Å–ª–∏ –≤ —Ñ-–∏—é –ø–µ—Ä–µ–¥–∞–ª–∏ –¥–∞—Ç—É
        for s in date:
            if s in string.punctuation:
                date = date.replace(s, "/") # –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –±—ç–∫—Å–ª–µ—à–µ–º

        currentYear = str(dt.datetime.now().year) # —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
        day, month = str(date.split("/")[0]), str(date.split("/")[1]) # –≤—ã–¥–µ–ª–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
        return day + "/" + month + "/" + currentYear # –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É

    elif char == "t": # –µ—Å–ª–∏ –≤ —Ñ-–∏—é –ø–µ—Ä–µ–¥–∞–ª–∏ –≤—Ä–µ–º—è
        for s in date:
            if s in string.punctuation:
                date = date.replace(s, ":")
                # –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
        if len(date) < 3: # –µ—Å–ª–∏ –≤–≤–µ–ª–∏ —á–∞—Å—ã –±–µ–∑ –º–∏–Ω—É—Ç
            date += ":00"
        return date

class FSMclient(StatesGroup): # –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    #start anketing
    username = State()
    machine = State()
    date_from = State()
    start = State()
    date_to = State()
    finish = State()

@log_func
async def command_start(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏—è –∏/–∏–ª–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"""
    try :
        msg = "–ü—Ä–∏–≤–µ—Ç!–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ —á–∞—Ç–∞ —Å—Ç—Ä–∞–ª–æ–∫ü§ñ\n" \
                  "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: \n" \
                  "–ö–æ–º–∞–Ω–¥—ã: /start –∏–ª–∏ /help\n" \
                  "–°–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å:/note\n" \
                  "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏:/list\n" \
                  "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: –û—Ç–º–µ–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞\n" \
                  "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞:/baddev\n" \
                  "–ü—Ä–µ–¥–ª–æ–∂–∫–∞:/gooddev\n"
        await bot.send_message(message.from_user.id, msg, reply_markup=clientMenu)
        await message.delete()
    except:
        await message.reply("–í—ã –Ω–µ –ø–∏—Å–∞–ª–∏ –±–æ—Ç—É —Ä–∞–Ω–µ–µüòØ\n"
                            "–°–∞–º–æ–µ –≤—Ä–µ–º—è —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—åüëÜ")

@log_func
async def cm_start(message: types.Message):
    """–ù–∞—á–∞–ª—å–Ω–∞—è —Ñ-–∏—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    await FSMclient.machine.set()
    await message.reply("–ö–∞–∫—É—é –º–∞—à–∏–Ω–∫—É –∑–∞–Ω–∏–º–∞–µ—Ç–µ?ü§î", reply_markup=machinesMenu)

async def set_machine(message: types.Message, state: FSMContext):
    logger.info(f"User called {set_machine.__name__}")
    try:
        async with state.proxy() as data:
            if message.from_user.username == None: # –ï—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∫—Ä—ã—Ç–æ
                data["username"] = message.from_user.first_name
            else:
                data["username"] = "@" + str(message.from_user.username)

            if message.text == "–ê—Ç–ª–∞–Ω—Ç" or message.text == "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è":
                data['machine'] = str(message.text)  # –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω–∫–∏ –≤ —Å–ª–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã—Ö
                await FSMclient.next()  # wait for answer for next question
                await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞üìÖ\n–ö–∞—Å—Ç–æ–º–Ω–æ->–õ—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç", reply_markup=dateMenu)
            else:
                await message.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω–∫–∏‚ÄºÔ∏è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: ‚ôª")
    except Exception as ex:
        # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        logger.error(f"User-{message.from_user.first_name} - Function: {set_date_from.__name__}.\n"
                     f"Arguments: {message, state}\nError: {ex}")
        await message.reply("–û—à–∏–±–∫–∞.–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=cancel_menu)

async def set_date_from(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Å—Ç–∏—Ä–∫–∏"""
    logger.info(f"User called {set_date_from.__name__}")
    today = dt.datetime.today() # —Å–µ–≥–æ–¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime
    tomorrow = today + dt.timedelta(days=1) # –∑–∞–≤—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime
    try:
        async with state.proxy() as data:
            if message.text == "–°–µ–≥–æ–¥–Ω—è":
                data["datestart"] = dt.datetime.strftime(today, "%d/%m/%Y")
            elif message.text == "–ó–∞–≤—Ç—Ä–∞":
                data["datestart"] = dt.datetime.strftime(tomorrow, "%d/%m/%Y")
            else:
                # –≤–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∞—Ç—ã
                data["datestart"] = validate_data(message.text, "d")
                date_start = dt.datetime.strptime(validate_data(message.text, "d"), "%d/%m/%Y")
                tms1 = int(dt.datetime.timestamp(today))  # —Å–µ–≥–æ–¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–π–º—Å—Ç–µ–º–ø
                tms2 = int(dt.datetime.timestamp(date_start))  # –≤–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–π–º—Å—Ç–µ–º–ø
                if tms2 < tms1:
                    # –ï—Å–ª–∏ —Ç–∞–π–º—Å—Ç–µ–º–ø –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –º–µ–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
                    raise Exception

            await FSMclient.next()
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞(–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç): ",reply_markup=cancel_menu)

    except Exception as ex:
        # –µ—Å–ª–∏ –¥–∞—Ç–∞ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n"
                            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞", reply_markup=dateMenu)
        logger.error(f"User-{message.from_user.first_name} - Function: {set_date_from.__name__}.\n"
                     f"Arguments: {message, state}\nError: {ex}")


async def set_time_from(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    logger.info(f"User called {set_date_from.__name__}")
    msg = "‚ö†Ô∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!"
    try:
        async with state.proxy() as data:
            time = dt.datetime.strptime(validate_data(message.text,"t"), "%H:%M")
            #–ï—Å–ª–∏ –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–æ–Ω–æ, –≤—ã–¥–∞—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

            if not db.check_time_itersection(validate_data(message.text,"t"), data["datestart"], "s"):
                # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–Ω—è—Ç–æ –ª–∏ –≤—Ä–µ–º—è.–ï—Å–ª–∏ –¥–∞ --> –≤–µ—Ä–Ω–µ—Ç False
                msg = "‚ö†Ô∏è–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!"
                raise Exception

            data['start'] = validate_data(message.text, "t")
            await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—èüìÖ\n–ö–∞—Å—Ç–æ–º–Ω–æ->–õ—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç ", reply_markup=dateMenu)
            await FSMclient.next()
    except Exception as ex:
        await message.reply(f"{msg}–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n"
                            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞",reply_markup=cancel_menu)
        logger.error(f"Function: {set_date_from.__name__}.\nArguments: {message, state}\nError: {ex}")

async def set_date_to(message: types.Message, state: FSMContext):
    """–§—É–Ω—Ü–∫–∏—è –∑–∞–¥–∞–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã"""
    logger.info(f"User called {set_date_from.__name__}")
    today = dt.datetime.today()
    tomorrow = today + dt.timedelta(days=1)
    msg = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!"
    try:
        async with state.proxy() as data:
            if message.text == "–°–µ–≥–æ–¥–Ω—è":
                data["datefinish"] = dt.datetime.strftime(today, "%d/%m/%Y")
            elif message.text == "–ó–∞–≤—Ç—Ä–∞":
                data["datefinish"] = dt.datetime.strftime(tomorrow, "%d/%m/%Y")
            else:
                #check date block
                data["datefinish"] = validate_data(message.text, "d")

            date_finish = dt.datetime.strptime(validate_data(data["datefinish"], "d"), "%d/%m/%Y")
            # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞—Ç—ã. –ï—Å–ª–∏ –Ω–µ—Ç --> –≤–µ—Ä–Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            tms1 = int(dt.datetime.timestamp(dt.datetime.strptime(data["datestart"], "%d/%m/%Y"))) #—Ç–∞–π–º—Å—Ç–µ–º–ø –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            tms2 = int(dt.datetime.timestamp(date_finish))  # —Ç–∞–π–º—Å—Ç–µ–º–ø –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if tms1 > tms2:
                msg = "–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞!"
                raise Exception

            await FSMclient.next()
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ", reply_markup=cancel_menu)

    except Exception as ex:
        await message.reply(f"‚ö†Ô∏è{msg}–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n"
                            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞", reply_markup=dateMenu)
        logger.error(f"User-{message.from_user.first_name} - Function: {set_date_from.__name__}.\n"
                     f"Arguments: {message, state}\nError: {ex}")


async def set_time_to(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    logger.info(f"User called {set_date_from.__name__}")
    msg = "‚ö†Ô∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!"
    try:
        async with state.proxy() as data:
            time = dt.datetime.strptime(validate_data(message.text,"t"), "%H:%M")
            # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
            data['finish'] = validate_data(message.text, "t")

            # —Ç–∞–π–º—Å—Ç–µ–º–ø –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
            tms1 = int(dt.datetime.timestamp(dt.datetime.strptime(data["datestart"], "%d/%m/%Y")))
            # —Ç–∞–π–º—Å—Ç–µ–º–ø –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            tms2 = int(dt.datetime.timestamp(dt.datetime.strptime(data["datefinish"], "%d/%m/%Y")))
            times = int(dt.datetime.timestamp(
                dt.datetime.strptime(data["datestart"] + " " + data["start"], "%d/%m/%Y %H:%M")))
            # —Ç–∞–π–º—Å—Ç–µ–º–ø –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
            timef = int(dt.datetime.timestamp(
                dt.datetime.strptime(data["datefinish"] + " " + data["finish"], "%d/%m/%Y %H:%M")))
            # —Ç–∞–π–º—Å—Ç–µ–º–ø –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏—Ä–∫–∏

            if tms2 == tms1 and times >= timef:
                msg = "‚ö†Ô∏è–í—Ä–µ–º—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∏–ª–∏ –º–µ—à—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ!"
                raise Exception
            if timef - times > 10800: # more than 3 hours
                msg = "‚ö†Ô∏è–ù–µ–ª—å–∑—è –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª–µ–µ 3-—Ö —á–∞—Å–æ–≤!"
                raise Exception
            if not db.check_time_itersection(validate_data(message.text,"t"), data["datefinish"], "f"):
                msg = "‚ö†Ô∏è–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!"
                raise Exception

            await message.reply(f"–í—ã –≤–≤–µ–ª–∏ —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
                                f"–ú–∞—à–∏–Ω–∫–∞: {data['machine']}\n"
                                f"–ù–∞—á–∞–ª–æ : {data['datestart']} {data['start']}\n"
                                f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {data['datefinish']} {data['finish']}\n")
            await message.answer("–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ '–í–µ—Ä–Ω–æ'\n"
                                 "–ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ /note –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å.", reply_markup=submitMenu)
            await FSMclient.next()
    except Exception as ex:
        print(ex)
        await message.reply(f"{msg} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        logger.error(f"User-{message.from_user.first_name} - Function: {set_date_from.__name__}.\n"
                     f"Arguments: {message, state}\nError: {ex}")


async def submit(message:types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    logger.info(f"User called {set_date_from.__name__}")
    try:
        async with state.proxy() as data:
            username = data["username"]
            machine = data["machine"]
            date_s = data["datestart"]
            date_f = data["datefinish"]
            time_s = data["start"]
            time_f = data["finish"]

            time_start = dt.datetime.timestamp(dt.datetime.strptime(f"{date_s} {time_s}", "%d/%m/%Y %H:%M"))
            # –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤–º–µ—Å—Ç–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–π–º—Å—Ç–µ–º–ø
            time_finish = dt.datetime.timestamp(dt.datetime.strptime(f"{date_f} {time_f}", "%d/%m/%Y %H:%M"))
            # –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–π–º—Å—Ç–µ–º–ø
            db.write_to_db((username, machine, time_start, time_finish))

            msg = f"‚¨õÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['username']}\n" \
                  f"üü£–ú–∞—à–∏–Ω–∫–∞: {data['machine']}\n" \
                  f"üü£–° : {data['datestart']} {data['start']}\n" \
                  f"‚¨õÔ∏è–ü–æ: {data['datefinish']} {data['finish']}\n" \

            await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã!‚úÖ", reply_markup=clientMenu)
            await bot.send_message(__group_id, msg)
            await state.finish()
    except Exception as ex:
        await message.reply("‚ö†Ô∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω\n"
                            "–∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã—à–µ.")
        logger.error(f"User-{message.from_user.first_name} - Function: {set_date_from.__name__}.\n"
                     f"Arguments: {message, state}\nError: {ex}")

async def get_notes(message:types.Message):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π"""
    logger.info(f"User called {set_date_from.__name__}")
    try:
        notes = db.read_data_from_db()
        if len(notes) == 0:
            await message.reply("–ó–∞–ø–∏—Å–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ãüìã")
        else:
            for note in notes:
                num = notes.index(note)
                time_from = dt.datetime.strftime(dt.datetime.fromtimestamp(int(note[3])), "%d/%m/%Y %H:%M")
                time_to = dt.datetime.strftime(dt.datetime.fromtimestamp(int(note[4])), "%d/%m/%Y %H:%M")
                msg = f"{num + 1})üëæ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {note[1]}\n" \
                      f"üü£–ú–∞—à–∏–Ω–∫–∞: {note[2]}\n" \
                      f"üü£C: {time_from}\n" \
                      f"üü£–ü–æ: {time_to}\n"
                await message.answer(msg)

    except Exception as ex:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω\n"
                    "–∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã—à–µ.")
        logger.error(f"User-{message.from_user.first_name} - Function: {set_date_from.__name__}.\n"
                f"Arguments: {message}\nError: {ex}")


async def cancel_handler(message: types.Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    current_state = await state.get_state()
    if current_state is None:
        await message.reply("–í—ã –Ω–µ –¥–µ–ª–∞–µ—Ç–µ –∑–∞–ø–∏—Å—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.", reply_markup=clientMenu)
        return
    await message.reply("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æüëå",reply_markup=clientMenu)
    await state.finish()

async def delete_old_notices(message:types.Message):
    """–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
    logger.info(f"User called {set_date_from.__name__}")
    try:
        db.delete_old()
        await message.reply("–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",reply_markup=clientMenu)
    except Exception as ex:
        await message.reply("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",reply_markup=clientMenu)
        logger.error(f"User-{message.from_user.first_name} - Function: {set_date_from.__name__}.\n"
                     f"Arguments: {message}\nError: {ex}")

async def kick_developer(message:types.Message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"""
    await message.answer("–¢–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: @abibsosay\n"
                         "–ù–µ —Å–∏–ª—å–Ω–æ –µ–≥–æ —Ç–∞–ºü§ï")

async def send_log_file(message:types.Message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    with open("logs.log", 'rb', encoding="utf-8") as file:
        await bot.send_document(message.chat.id, file)

async def empty_handler(message:types.Message):
    """–ü—É—Å—Ç–æ–π —Ö–µ–Ω–¥–ª–µ—Ä"""
    await message.reply("–ë–æ—Ç –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏üòë")

@log_func
def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_message_handler(cancel_handler, Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(cm_start, commands=["note"],state=None)
    dp.register_message_handler(get_notes, commands=["list"])
    dp.register_message_handler(kick_developer, commands=["baddev", "gooddev"])
    dp.register_message_handler(send_log_file, commands=["sendlogfile"])
    dp.register_message_handler(set_machine, state=FSMclient.machine)
    dp.register_message_handler(set_date_from, state=FSMclient.date_from)
    dp.register_message_handler(set_time_from, state=FSMclient.start)
    dp.register_message_handler(set_date_to, state=FSMclient.date_to)
    dp.register_message_handler(set_time_to, state=FSMclient.finish)
    dp.register_message_handler(submit, Text(equals="–í–µ—Ä–Ω–æ", ignore_case=True), state="*")
    dp.register_message_handler(delete_old_notices, commands=["deleteoldnoticesadmin"])
    dp.register_message_handler(empty_handler)
